{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Home"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Understanding the Physical System A pendulum is a fundamental mechanical system that exhibits a variety of motion types, including periodic, damped, and chaotic behaviors, depending on external influences. When damping (friction) and external periodic forcing are introduced, the motion becomes more complex and can exhibit chaotic behavior. The governing equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement (radians). - \\(b\\) is the damping coefficient, accounting for resistive forces. - \\(g\\) is the acceleration due to gravity. - \\(L\\) is the length of the pendulum. - \\(A \\cos(\\omega t)\\) represents the external periodic driving force with amplitude \\(A\\) and frequency \\(\\omega\\) . Key Concepts Simple Harmonic Motion : If \\(b = 0\\) and \\(A = 0\\) , the motion is simple harmonic for small angles. Damped Motion : If \\(b > 0\\) and \\(A = 0\\) , oscillations decay over time due to resistive forces. Forced Motion : If \\(A > 0\\) , an external force drives the pendulum, leading to resonance and chaotic behavior. 2. Transforming the Equation for Numerical Methods The equation above is a second-order differential equation , which must be rewritten as a system of first-order equations for numerical solving. Defining State Variables We introduce: - \\(\\theta_1 = \\theta\\) (position) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) (velocity) Rewriting the system: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b\\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\] This form allows us to apply numerical integration techniques like Runge-Kutta (RK45) . 3. Choosing a Numerical Solver We employ the Runge-Kutta (RK45) method , which is well-suited for solving nonlinear differential equations. This method is preferred because: It handles nonlinearity effectively. It dynamically adjusts step size for accuracy. It is frequently used for chaotic systems like the forced damped pendulum. 4. Setting Up Initial Conditions The initial state of the pendulum significantly affects its behavior. We define: \\[ \\theta(0) = \\theta_0, \\quad \\frac{d\\theta}{dt}(0) = \\omega_0 \\] For example: - Small initial displacement : \\(\\theta_0 = 0.1\\) rad. - Initially at rest : \\(\\omega_0 = 0\\) rad/s. 5. Running the Simulation To numerically integrate the system: 1. Define the time span for simulation (e.g., \\(t \\in [0, 50]\\) ). 2. Solve the equations using the RK45 method . 3. Store and analyze the results over time. Implementation in Python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Length of the pendulum (m) b = 0.2 # Damping coefficient omega = 2.0 # Driving frequency # Define the system of ODEs def forced_damped_pendulum(t, y, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t0, t_end = 0, 50 initial_conditions = [0.1, 0] # Small initial angle and zero initial velocity # Solve the system time_eval = np.linspace(t0, t_end, 2000) A = 1.2 # Set A for initial run sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A, omega), t_eval=time_eval, method='RK45') # Extract results theta = sol.y[0] omega_values = sol.y[1] time = sol.t # Time Series Plot plt.figure(figsize=(10, 5)) plt.plot(time, theta, label=r'$\\theta(t)$', color='b') plt.xlabel('Time (s)') plt.ylabel('Angular Position (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() # Phase Portrait plt.figure(figsize=(6, 6)) plt.plot(theta, omega_values, lw=0.8, color='r') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Phase Portrait') plt.grid() plt.show() # Poincar\u00e9 Section (Stroboscopic Map) omega_scalar = float(np.mean(omega_values)) if isinstance(omega_values, np.ndarray) else omega if omega_scalar != 0: poincare_times = np.arange(t0, t_end, 2 * np.pi / omega_scalar) else: poincare_times = np.linspace(t0, t_end, 50) # Fallback to evenly spaced points theta_poincare = np.interp(poincare_times, time, theta) omega_poincare = np.interp(poincare_times, time, omega_values) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=10, color='green') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show() # Bifurcation Diagram - Sweeping Driving Force Amplitude A_values = np.linspace(0, 2, 50) final_theta = [] for A_val in A_values: sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A_val, omega), t_eval=np.linspace(t_end-10, t_end, 500), method='RK45') final_theta.append(sol.y[0][-1]) plt.figure(figsize=(10, 6)) plt.scatter(A_values, final_theta, s=1, color='blue') plt.xlabel('Driving Force Amplitude (A)') plt.ylabel('Final Angular Position (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show() 6. Visualizing Results After solving for \\(\\theta(t)\\) , we analyze its behavior using different graphical representations: (a) Time Series Plot Shows how \\(\\theta(t)\\) evolves over time. Helps detect periodicity, resonance, or chaotic motion. (b) Phase Portrait Plots angular position ( \\(\\theta\\) ) vs. angular velocity ( \\(\\dot{\\theta}\\) ) . Closed loops indicate periodic motion, while scattered points suggest chaos. (c) Poincar\u00e9 Section Captures stroboscopic points sampled at regular intervals. Helps distinguish between regular and chaotic motion . (d) Bifurcation Diagram Varies the driving force amplitude (A) to observe transitions in motion. Reveals transitions from stability to chaos . 7. Analyzing the Behavior Different values of parameters lead to different types of motion: (a) Small Forcing and Weak Damping The pendulum exhibits simple periodic oscillations . The phase portrait shows smooth elliptical loops . (b) Resonance Condition When \\(\\omega\\) matches the natural frequency \\(\\omega_0 = \\sqrt{g/L}\\) , large oscillations occur. Energy accumulates over time, leading to strong oscillations. (c) Strong Damping Oscillations decay quickly, leading to overdamped motion . (d) Chaotic Motion For specific values of \\(A\\) and \\(\\omega\\) , the system exhibits sensitive dependence on initial conditions . Small changes in \\(\\theta_0\\) lead to divergent trajectories (butterfly effect). 8. Conclusion The forced damped pendulum is a rich nonlinear system that displays a variety of behaviors, from periodic to chaotic motion. Using numerical simulations , we can analyze its response to different parameters. Tools like Poincar\u00e9 sections and bifurcation diagrams help classify its dynamical regimes.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-understanding-the-physical-system","text":"A pendulum is a fundamental mechanical system that exhibits a variety of motion types, including periodic, damped, and chaotic behaviors, depending on external influences. When damping (friction) and external periodic forcing are introduced, the motion becomes more complex and can exhibit chaotic behavior. The governing equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement (radians). - \\(b\\) is the damping coefficient, accounting for resistive forces. - \\(g\\) is the acceleration due to gravity. - \\(L\\) is the length of the pendulum. - \\(A \\cos(\\omega t)\\) represents the external periodic driving force with amplitude \\(A\\) and frequency \\(\\omega\\) .","title":"1. Understanding the Physical System"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#key-concepts","text":"Simple Harmonic Motion : If \\(b = 0\\) and \\(A = 0\\) , the motion is simple harmonic for small angles. Damped Motion : If \\(b > 0\\) and \\(A = 0\\) , oscillations decay over time due to resistive forces. Forced Motion : If \\(A > 0\\) , an external force drives the pendulum, leading to resonance and chaotic behavior.","title":"Key Concepts"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-transforming-the-equation-for-numerical-methods","text":"The equation above is a second-order differential equation , which must be rewritten as a system of first-order equations for numerical solving.","title":"2. Transforming the Equation for Numerical Methods"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#defining-state-variables","text":"We introduce: - \\(\\theta_1 = \\theta\\) (position) - \\(\\theta_2 = \\frac{d\\theta}{dt}\\) (velocity) Rewriting the system: \\[ \\frac{d\\theta_1}{dt} = \\theta_2 \\] \\[ \\frac{d\\theta_2}{dt} = -b\\theta_2 - \\frac{g}{L} \\sin\\theta_1 + A \\cos(\\omega t) \\] This form allows us to apply numerical integration techniques like Runge-Kutta (RK45) .","title":"Defining State Variables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-choosing-a-numerical-solver","text":"We employ the Runge-Kutta (RK45) method , which is well-suited for solving nonlinear differential equations. This method is preferred because: It handles nonlinearity effectively. It dynamically adjusts step size for accuracy. It is frequently used for chaotic systems like the forced damped pendulum.","title":"3. Choosing a Numerical Solver"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-setting-up-initial-conditions","text":"The initial state of the pendulum significantly affects its behavior. We define: \\[ \\theta(0) = \\theta_0, \\quad \\frac{d\\theta}{dt}(0) = \\omega_0 \\] For example: - Small initial displacement : \\(\\theta_0 = 0.1\\) rad. - Initially at rest : \\(\\omega_0 = 0\\) rad/s.","title":"4. Setting Up Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-running-the-simulation","text":"To numerically integrate the system: 1. Define the time span for simulation (e.g., \\(t \\in [0, 50]\\) ). 2. Solve the equations using the RK45 method . 3. Store and analyze the results over time.","title":"5. Running the Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implementation-in-python","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # Gravity (m/s^2) L = 1.0 # Length of the pendulum (m) b = 0.2 # Damping coefficient omega = 2.0 # Driving frequency # Define the system of ODEs def forced_damped_pendulum(t, y, A, omega): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g / L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial conditions t0, t_end = 0, 50 initial_conditions = [0.1, 0] # Small initial angle and zero initial velocity # Solve the system time_eval = np.linspace(t0, t_end, 2000) A = 1.2 # Set A for initial run sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A, omega), t_eval=time_eval, method='RK45') # Extract results theta = sol.y[0] omega_values = sol.y[1] time = sol.t # Time Series Plot plt.figure(figsize=(10, 5)) plt.plot(time, theta, label=r'$\\theta(t)$', color='b') plt.xlabel('Time (s)') plt.ylabel('Angular Position (rad)') plt.title('Forced Damped Pendulum Motion') plt.legend() plt.grid() plt.show() # Phase Portrait plt.figure(figsize=(6, 6)) plt.plot(theta, omega_values, lw=0.8, color='r') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Phase Portrait') plt.grid() plt.show() # Poincar\u00e9 Section (Stroboscopic Map) omega_scalar = float(np.mean(omega_values)) if isinstance(omega_values, np.ndarray) else omega if omega_scalar != 0: poincare_times = np.arange(t0, t_end, 2 * np.pi / omega_scalar) else: poincare_times = np.linspace(t0, t_end, 50) # Fallback to evenly spaced points theta_poincare = np.interp(poincare_times, time, theta) omega_poincare = np.interp(poincare_times, time, omega_values) plt.figure(figsize=(6, 6)) plt.scatter(theta_poincare, omega_poincare, s=10, color='green') plt.xlabel(r'$\\theta$ (rad)') plt.ylabel(r'$\\dot{\\theta}$ (rad/s)') plt.title('Poincar\u00e9 Section') plt.grid() plt.show() # Bifurcation Diagram - Sweeping Driving Force Amplitude A_values = np.linspace(0, 2, 50) final_theta = [] for A_val in A_values: sol = solve_ivp(forced_damped_pendulum, [t0, t_end], initial_conditions, args=(A_val, omega), t_eval=np.linspace(t_end-10, t_end, 500), method='RK45') final_theta.append(sol.y[0][-1]) plt.figure(figsize=(10, 6)) plt.scatter(A_values, final_theta, s=1, color='blue') plt.xlabel('Driving Force Amplitude (A)') plt.ylabel('Final Angular Position (rad)') plt.title('Bifurcation Diagram') plt.grid() plt.show()","title":"Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-visualizing-results","text":"After solving for \\(\\theta(t)\\) , we analyze its behavior using different graphical representations:","title":"6. Visualizing Results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#a-time-series-plot","text":"Shows how \\(\\theta(t)\\) evolves over time. Helps detect periodicity, resonance, or chaotic motion.","title":"(a) Time Series Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#b-phase-portrait","text":"Plots angular position ( \\(\\theta\\) ) vs. angular velocity ( \\(\\dot{\\theta}\\) ) . Closed loops indicate periodic motion, while scattered points suggest chaos.","title":"(b) Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#c-poincare-section","text":"Captures stroboscopic points sampled at regular intervals. Helps distinguish between regular and chaotic motion .","title":"(c) Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#d-bifurcation-diagram","text":"Varies the driving force amplitude (A) to observe transitions in motion. Reveals transitions from stability to chaos .","title":"(d) Bifurcation Diagram"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-analyzing-the-behavior","text":"Different values of parameters lead to different types of motion:","title":"7. Analyzing the Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#a-small-forcing-and-weak-damping","text":"The pendulum exhibits simple periodic oscillations . The phase portrait shows smooth elliptical loops .","title":"(a) Small Forcing and Weak Damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#b-resonance-condition","text":"When \\(\\omega\\) matches the natural frequency \\(\\omega_0 = \\sqrt{g/L}\\) , large oscillations occur. Energy accumulates over time, leading to strong oscillations.","title":"(b) Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#c-strong-damping","text":"Oscillations decay quickly, leading to overdamped motion .","title":"(c) Strong Damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#d-chaotic-motion","text":"For specific values of \\(A\\) and \\(\\omega\\) , the system exhibits sensitive dependence on initial conditions . Small changes in \\(\\theta_0\\) lead to divergent trajectories (butterfly effect).","title":"(d) Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#8-conclusion","text":"The forced damped pendulum is a rich nonlinear system that displays a variety of behaviors, from periodic to chaotic motion. Using numerical simulations , we can analyze its response to different parameters. Tools like Poincar\u00e9 sections and bifurcation diagrams help classify its dynamical regimes.","title":"8. Conclusion"},{"location":"1%20Physics/1%20Mechanics/problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Equations of Motion The equations governing projectile motion with air resistance are derived from Newton\u2019s second law. We consider a projectile of mass \\(m\\) moving under the influence of gravity and an opposing air resistance force proportional to velocity. The equations of motion are given by: \\[ m \\cdot x'' = -b \\cdot x' \\] \\[ m \\cdot y'' = -mg - b \\cdot y' \\] Where: \\(m\\) = mass of the projectile (kg) \\(g\\) = gravitational acceleration (9.81 m/s\u00b2) \\(b\\) = air resistance coefficient (kg/s) \\(x', y'\\) = velocity components 2. Initial Conditions The initial conditions define the starting point and initial velocity components of the projectile. \\[ x_0 = 0, \\quad y_0 = 0 \\] (Starting position at the origin) \\[ v_{x0} = 10, \\quad v_{y0} = 10 \\] (Initial velocity components in m/s) 3. Deriving the Equations of Motion Step 1: Solve for Horizontal Motion From the equation: \\[ m \\cdot x'' = -b \\cdot x' \\] Rewriting: \\[ x'' + \\frac{b}{m} x' = 0 \\] This is a first-order linear differential equation in \\(x'\\) . The general solution for velocity is: \\[ x'(t) = v_{x0} e^{-\\frac{b}{m} t} \\] To find the horizontal displacement, integrate: \\[ x(t) = \\frac{m}{b} v_{x0} \\left( 1 - e^{-\\frac{b}{m} t} \\right) \\] Step 2: Solve for Vertical Motion From the vertical motion equation: \\[ m \\cdot y'' = -mg - b \\cdot y' \\] Rewriting: \\[ y'' + \\frac{b}{m} y' + g = 0 \\] Solving for \\(y'\\) : \\[ y'(t) = \\left( v_{y0} + \\frac{mg}{b} \\right) e^{-\\frac{b}{m} t} - \\frac{mg}{b} \\] Integrating to get \\(y(t)\\) : \\[ y(t) = \\frac{m}{b} \\left( v_{y0} + \\frac{mg}{b} \\right) \\left( 1 - e^{-\\frac{b}{m} t} \\right) - \\frac{mg}{b} t \\] For small air resistance ( \\(b \\approx 0\\) ), this simplifies to: \\[ y(t) = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\] Calculate the Time of Flight The projectile reaches the ground when \\(y = 0\\) . Using the simplified equation: \\[ y(t) = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\] Setting \\(y = 0\\) and solving for \\(t\\) : \\[ t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0 \\] This gives two solutions: \\[ t = 0 \\quad \\text{(initial time)} \\] \\[ t = \\frac{2 v_0 \\sin \\theta}{g} \\] Thus, the total time of flight is: \\[ T = \\frac{2 v_0 \\sin \\theta}{g} \\] Derive the Range Equation The range is the horizontal distance at \\(T\\) : $$ R = v_0 \\cos\\theta \\cdot T$$ Substituting \\(T\\) : $$ R = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} $$ Using the trigonometric identity \\(2 \\sin \\theta \\cos \\theta = \\sin 2\\theta\\) , we obtain: $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ Find the Optimal Angle for Maximum Range The range depends on \\(\\sin 2\\theta\\) , which is maximized when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . Thus, the optimal angle for maximum range is \\(45^\\circ\\) . Step 3: Analyze How Range Changes with Angle 1. Varying the Angle from 0\u00b0 to 90\u00b0 Compute \\(R\\) for multiple angles and observe how it changes. 2. Effects of Initial Velocity Increase or decrease \\(v_0\\) and check how it impacts $ R $. 3. Effects of Gravity Consider different values of \\(g\\) (e.g., Earth vs. Moon) and see how the range varies. 4. Find the Symmetry The equation \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) is symmetric , meaning: \\(\\theta = 30^\\circ\\) and \\(\\theta = 60^\\circ\\) give the same range. \\(\\theta = 20^\\circ\\) and \\(\\theta = 70^\\circ\\) also give the same range. Step 4: Practical Applications 1. Sports Applications Optimizing kick angles in soccer, golf, or basketball for maximum range. 2. Ballistics & Military Applications Determining the best firing angle for artillery. 3. Rocket Science Understanding launch angles for spacecraft trajectories. Step 5: Implementation in Python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters m = 1.0 # Mass (kg) g = 9.81 # Gravity (m/s^2) b = 0.1 # Air resistance coefficient (kg/s) # Initial conditions x0, y0 = 0.0, 0.0 # Initial position (m) vx0, vy0 = 10.0, 10.0 # Initial velocity (m/s) # Define the equations of motion with air resistance def equations(t, state): x, vx, y, vy = state dxdt = vx dvxdt = - (b / m) * vx # Air resistance in x-direction dydt = vy dvydt = -g - (b / m) * vy # Gravity and air resistance in y-direction return [dxdt, dvxdt, dydt, dvydt] # Time span for simulation t_span = (0, 2) t_eval = np.linspace(0, 2, 100) # Solve the system sol = solve_ivp(equations, t_span, [x0, vx0, y0, vy0], t_eval=t_eval) # Extract solution x, vx, y, vy = sol.y # Plot results plt.figure(figsize=(8, 5)) plt.plot(x, y, label=\"Projectile Motion with Air Resistance\") plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.title(\"Projectile Motion Under Gravity and Air Resistance\") plt.legend() plt.grid() plt.show() Step 6: Discussion & Limitations 1. What does the graph show? A clear peak at \\(\\theta = 45^\\circ\\) . Symmetry in range for complementary angles. 2. Limitations of the Model Assumes flat ground . 3. How to Improve the Model? Add drag force. Consider different launch heights.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/problem_1/#1-equations-of-motion","text":"The equations governing projectile motion with air resistance are derived from Newton\u2019s second law. We consider a projectile of mass \\(m\\) moving under the influence of gravity and an opposing air resistance force proportional to velocity. The equations of motion are given by: \\[ m \\cdot x'' = -b \\cdot x' \\] \\[ m \\cdot y'' = -mg - b \\cdot y' \\]","title":"1. Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/problem_1/#where","text":"\\(m\\) = mass of the projectile (kg) \\(g\\) = gravitational acceleration (9.81 m/s\u00b2) \\(b\\) = air resistance coefficient (kg/s) \\(x', y'\\) = velocity components","title":"Where:"},{"location":"1%20Physics/1%20Mechanics/problem_1/#2-initial-conditions","text":"The initial conditions define the starting point and initial velocity components of the projectile. \\[ x_0 = 0, \\quad y_0 = 0 \\] (Starting position at the origin) \\[ v_{x0} = 10, \\quad v_{y0} = 10 \\] (Initial velocity components in m/s)","title":"2. Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/problem_1/#3-deriving-the-equations-of-motion","text":"","title":"3. Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-1-solve-for-horizontal-motion","text":"From the equation: \\[ m \\cdot x'' = -b \\cdot x' \\] Rewriting: \\[ x'' + \\frac{b}{m} x' = 0 \\] This is a first-order linear differential equation in \\(x'\\) . The general solution for velocity is: \\[ x'(t) = v_{x0} e^{-\\frac{b}{m} t} \\] To find the horizontal displacement, integrate: \\[ x(t) = \\frac{m}{b} v_{x0} \\left( 1 - e^{-\\frac{b}{m} t} \\right) \\]","title":"Step 1: Solve for Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-2-solve-for-vertical-motion","text":"From the vertical motion equation: \\[ m \\cdot y'' = -mg - b \\cdot y' \\] Rewriting: \\[ y'' + \\frac{b}{m} y' + g = 0 \\] Solving for \\(y'\\) : \\[ y'(t) = \\left( v_{y0} + \\frac{mg}{b} \\right) e^{-\\frac{b}{m} t} - \\frac{mg}{b} \\] Integrating to get \\(y(t)\\) : \\[ y(t) = \\frac{m}{b} \\left( v_{y0} + \\frac{mg}{b} \\right) \\left( 1 - e^{-\\frac{b}{m} t} \\right) - \\frac{mg}{b} t \\] For small air resistance ( \\(b \\approx 0\\) ), this simplifies to: \\[ y(t) = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\]","title":"Step 2: Solve for Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/problem_1/#calculate-the-time-of-flight","text":"The projectile reaches the ground when \\(y = 0\\) . Using the simplified equation: \\[ y(t) = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\] Setting \\(y = 0\\) and solving for \\(t\\) : \\[ t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0 \\] This gives two solutions: \\[ t = 0 \\quad \\text{(initial time)} \\] \\[ t = \\frac{2 v_0 \\sin \\theta}{g} \\] Thus, the total time of flight is: \\[ T = \\frac{2 v_0 \\sin \\theta}{g} \\]","title":"Calculate the Time of Flight"},{"location":"1%20Physics/1%20Mechanics/problem_1/#derive-the-range-equation","text":"The range is the horizontal distance at \\(T\\) : $$ R = v_0 \\cos\\theta \\cdot T$$ Substituting \\(T\\) : $$ R = v_0 \\cos \\theta \\cdot \\frac{2 v_0 \\sin \\theta}{g} $$ Using the trigonometric identity \\(2 \\sin \\theta \\cos \\theta = \\sin 2\\theta\\) , we obtain: $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$","title":"Derive the Range Equation"},{"location":"1%20Physics/1%20Mechanics/problem_1/#find-the-optimal-angle-for-maximum-range","text":"The range depends on \\(\\sin 2\\theta\\) , which is maximized when \\(2\\theta = 90^\\circ\\) , or \\(\\theta = 45^\\circ\\) . Thus, the optimal angle for maximum range is \\(45^\\circ\\) .","title":"Find the Optimal Angle for Maximum Range"},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-3-analyze-how-range-changes-with-angle","text":"","title":"Step 3: Analyze How Range Changes with Angle"},{"location":"1%20Physics/1%20Mechanics/problem_1/#1-varying-the-angle-from-0-to-90","text":"Compute \\(R\\) for multiple angles and observe how it changes.","title":"1. Varying the Angle from 0\u00b0 to 90\u00b0"},{"location":"1%20Physics/1%20Mechanics/problem_1/#2-effects-of-initial-velocity","text":"Increase or decrease \\(v_0\\) and check how it impacts $ R $.","title":"2. Effects of Initial Velocity"},{"location":"1%20Physics/1%20Mechanics/problem_1/#3-effects-of-gravity","text":"Consider different values of \\(g\\) (e.g., Earth vs. Moon) and see how the range varies.","title":"3. Effects of Gravity"},{"location":"1%20Physics/1%20Mechanics/problem_1/#4-find-the-symmetry","text":"The equation \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) is symmetric , meaning: \\(\\theta = 30^\\circ\\) and \\(\\theta = 60^\\circ\\) give the same range. \\(\\theta = 20^\\circ\\) and \\(\\theta = 70^\\circ\\) also give the same range.","title":"4. Find the Symmetry"},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-4-practical-applications","text":"","title":"Step 4: Practical Applications"},{"location":"1%20Physics/1%20Mechanics/problem_1/#1-sports-applications","text":"Optimizing kick angles in soccer, golf, or basketball for maximum range.","title":"1. Sports Applications"},{"location":"1%20Physics/1%20Mechanics/problem_1/#2-ballistics-military-applications","text":"Determining the best firing angle for artillery.","title":"2. Ballistics &amp; Military Applications"},{"location":"1%20Physics/1%20Mechanics/problem_1/#3-rocket-science","text":"Understanding launch angles for spacecraft trajectories.","title":"3. Rocket Science"},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-5-implementation-in-python","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters m = 1.0 # Mass (kg) g = 9.81 # Gravity (m/s^2) b = 0.1 # Air resistance coefficient (kg/s) # Initial conditions x0, y0 = 0.0, 0.0 # Initial position (m) vx0, vy0 = 10.0, 10.0 # Initial velocity (m/s) # Define the equations of motion with air resistance def equations(t, state): x, vx, y, vy = state dxdt = vx dvxdt = - (b / m) * vx # Air resistance in x-direction dydt = vy dvydt = -g - (b / m) * vy # Gravity and air resistance in y-direction return [dxdt, dvxdt, dydt, dvydt] # Time span for simulation t_span = (0, 2) t_eval = np.linspace(0, 2, 100) # Solve the system sol = solve_ivp(equations, t_span, [x0, vx0, y0, vy0], t_eval=t_eval) # Extract solution x, vx, y, vy = sol.y # Plot results plt.figure(figsize=(8, 5)) plt.plot(x, y, label=\"Projectile Motion with Air Resistance\") plt.xlabel(\"X Position (m)\") plt.ylabel(\"Y Position (m)\") plt.title(\"Projectile Motion Under Gravity and Air Resistance\") plt.legend() plt.grid() plt.show()","title":"Step 5: Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/problem_1/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/problem_1/#step-6-discussion-limitations","text":"","title":"Step 6: Discussion &amp; Limitations"},{"location":"1%20Physics/1%20Mechanics/problem_1/#1-what-does-the-graph-show","text":"A clear peak at \\(\\theta = 45^\\circ\\) . Symmetry in range for complementary angles.","title":"1. What does the graph show?"},{"location":"1%20Physics/1%20Mechanics/problem_1/#2-limitations-of-the-model","text":"Assumes flat ground .","title":"2. Limitations of the Model"},{"location":"1%20Physics/1%20Mechanics/problem_1/#3-how-to-improve-the-model","text":"Add drag force. Consider different launch heights.","title":"3. How to Improve the Model?"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and/_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and/_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and/_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and/_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and/_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and/_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and/_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and/_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}